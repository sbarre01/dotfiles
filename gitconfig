[user]
	name = Stephen Barrett
	email = stephen.barrett@accenture.com
[push]
	default = simple
[branch]
	# Automatically set up pull to be --rebase
	autosetuprebase = always
[branch "master"]
	rebase = true
	autosetuprebase = true
[status]
	displaycommentprefix = false
[rebase]
	stat = true
[hub]
	protocol = https
[color]
# ui = true is a superset of all the more specific color options
#  as documented at http://book.git-scm.com/5_customizing_git.html
# When set to always, always use colors in all git commands which are capable of colored output.
# When false, never. When set to true or auto, use colors only when the output is to the terminal.
# When more specific variables of color.* are set, they always take precedence over this setting.
# Defaults to false.
	ui = auto
	# diff = auto
	# status = auto
	# branch = auto
[color "branch"]
	#current = yellow reverse
	#local = yellow
	#remote = green
[color "diff"]
	#meta = yellow bold
	#frag = magenta bold
	#old = red bold
	#new = green bold
[color "status"]
	#added = yellow
	#changed = green
	#untracked = cyan

[gui]
#	recentrepo = ~/Documents/Temp/Scratch/hello/hgw1

[core]
	safecrlf = warn
	deltaBaseCacheLimit = 1G
	excludesfile = ~/.gitignore
	quotepath = false
#	autocrlf = input
	editor = vim
[alias]
	abbr = "!sh -c 'git rev-list --all | grep ^$1 | while read commit; do git --no-pager log -n1 --pretty=format:\"%H %ci %an %s%n\" $commit; done' -"
	aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'
	blg = log --graph --decorate --all --abbrev-commit --pretty=oneline
	br = branch -a
	busypeople = shortlog -6
	busythisweek = shortlog --since=one.week.ago
	cam = commit -a -m
	c = commit
	ci = commit
	cl = log --stat -C -2
	cob = checkout -b
	co = checkout
	configpushcurrent = config push.default current
	configpushnothing = config push.default nothing
	configpushtracking = config push.default matching
	configpushtracking = config push.default tracking
	configsimplelog = config format.pretty oneline
	dc = diff --staged
	dcw = diff --color-words
	d = diff --color-words
	dh = diff HEAD
	dc = diff --staged
	dw = diff --word-diff
	dcw = diff --color-words
	dm = !git diff | mate
	dv = !git diff | vim
	dump = cat-file -p
	dw = diff --word-diff
	empty-tree-sha1 = hash-object -t tree /dev/null
	fetchnotes = !sh -c 'git fetch $1 refs/notes/*:refs/notes/*' -
	fixup = "!sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
	gc-ap = gc --aggressive --prune
	graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
	gwcl = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	hse = log --stat -5
	ignorechanges = update-index --assume-unchanged
	ignored = ls-files --others --i --exclude-standard
	k = !exec gitk --all&
	last = log -1 HEAD
	latest-branches = for-each-ref --count=30 --sort=-committerdate refs/heads/ --format='%(refname:short)'
	lf = log --pretty=fuller
	lg = log --oneline --graph --decorate --pretty=format:'%C(auto)%h%Creset %C(auto)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit --date=relative
	lgorigin = log --oneline --graph --decorate origin/master...master --left-right
	lgso = log --graph --date=short --pretty=format:'%C(yellow)%h%Creset %cn%x09%cd %s%C(green bold)%d'
	listconf = config --global --list
	listhistory = log --name-status
	liststaged = diff --name-status --staged
	listunstaged = diff --name-status
	ll = log --stat -C -3
	lm = log --stat -M
	lod = log --oneline --decorate
	logcpy = log --stat -1 -C -C
	logfive = log --graph --pretty=oneline --abbrev-commit --decorate --all -5
	logit = log --stat -M
	logme = log --author=Stephen --stat -C
	logm = log --stat -M
	logn = log --oneline --name-only
	logr2 = log --stat -M -2
	logr = log -M
	logsimple = log --graph --abbrev-commit --pretty=oneline --all --decorate
	lol = log --pretty=oneline --graph --abbrev-commit --all
	lp = log -p
	lpo = log --pretty=oneline --abbrev-commit --graph --decorate --all
	lsm = log -M --stat
	lwr = log --stat -C
	mergekeepoursonly = merge -s ours
	nfjsunpushed = log origin/master..master --oneline
	noderelnotes = git log --graph --pretty=format:'%h%d %s (%an)'
	noticechanges = update-index --no-assume-unchanged
	nr = "!sh -c 'git init $0'"
	oneline ="!_() { $(test $# -eq 0 && echo xargs -L1) git log --no-walk --decorate --oneline \"$@\"; }; _"
	orphank = !gitk --all `git reflog | cut -c1-7`&
	orphanl = !git log --pretty=oneline --abbrev-commit --graph --decorate `git reflog | cut -c1-7`
	patchforthis = "!git diff -p $(git empty-tree-sha1)"
	ph = push
	pl = pull
	prunenow = gc --prune=now
    pubdev = !git pub checkout master && git pull && git checkout dev && git rebase master && git checkout master && git merge dev && git wtf
	pub = push -u origin
	purgeme = !git clean -fd && git reset --hard
	pur = pull --rebase
	pushnotes = !sh -c 'git push $1 refs/notes/*' -
	ready = rebase -i @{u}
	redocommit = reset --soft HEAD^
	ri = rebase --interactive --autosquash
	rlog = log --color-words --stat -3
	rmmissing = !git rm $(git ls-files --deleted)
	ro = !git fetch origin && git reset --hard origin/master
	rtheirs = !git checkout --theirs ./ && git add . && git rebase --continue
	rv = remote -v
	scrub = !git reset --hard && git clean -fd
	servehere = daemon --verbose --informative-errors --reuseaddr --export-all --base-path=. --enable=receive-pack
	shorten = "!sh -c 'curl -i http://git.io -F url=$1' -"
	showignored2 = ls-files --others --ignored --exclude-standard
	showignored = clean -ndX
	showuntracked = ls-files --others --exclude-standard
	slog = log --graph --simplify-by-decoration --all --abbrev-commit --pretty=oneline
	sno = show --name-only
	squash = "!sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
	s = status -u -s
	standup = log --all --since yesterday --author stephen.barrett@accenture.com
	stat = status
	st = status
	sync = !git pull && git push
	tagcontains = git tag -l --contains HEAD
	tips = "!_() { t=$(git rev-list --no-merges --max-count=1 \"$@\"); if test -n \"$t\"; then echo $t; _ \"$@\" ^$t; fi; }; _"
	type = cat-file -t
	weekly = !git --no-pager log --author=\"`git config --global user.name`\" --since='2 sunday ago' --until='1 sunday ago' --format='%Cgreen%ci%Creset %s%Creset'
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
	whitespaceviolations = "!git diff --check $(git empty-tree-sha1)"
	who = shortlog -s --
	wipe = reset --hard HEAD
	url = !git info | grep ^remote | grep \\.url | awk -F= \"{print $2}\"
[apply]
	whitespace = nowarn
[rerere]
	enabled = true

[difftool]
	prompt = false
[difftool "myaraxis"]
	cmd = araxisgitdiff ONE $LOCAL THREE FOUR $REMOTE
[diff]
#	tool = araxis
#	tool = Kaleidoscope
#	renames = true
	tool = bc3
	algorithm = patience
[diff "nodiff"]
	command = /bin/true
[mergetool]
	prompt = false
	keepBackup = false
[mergetool "myaraxis"]
    cmd = araxisgitmerge $PWD/$REMOTE $PWD/$BASE $PWD/$LOCAL $PWD/$MERGED
[merge]
#	tool = araxis
#	tool = Kaleidoscope
	tool = bc3
	bc3 = trustExitCode

[url "git://github.com/"]
	insteadOf = "ghg://"
	pushInsteadOf = "ghg://"
	# Example: git clone ghg://ntschutta/emacs
[url "git://github.com/sbarre01/"]
	insteadOf = "ghgj://"
	pushInsteadOf = "ghgj://"
	# Example: git clone ghgj://hellogitworld
[url "git@github.com:"]
	insteadOf = "ghs://"
	pushInsteadOf = "ghs://"
[url "git@github.com:sbarre01/"]
	insteadOf = "ghsj://"
	pushInsteadOf = "ghsj://"
[url "https://github.com/"]
	insteadOf = "ghh://"
	pushInsteadOf = "ghh://"
[url "https://github.com/sbarre01/"]
	insteadOf = "ghhj://"
	pushInsteadOf = "ghhj://"

[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[difftool "p4merge"]
	cmd = \"/Applications/p4merge.app/Contents/Resources/launchp4merge $LOCAL $REMOTE\"
[http]
	# proxy=http://something

[hub]
	protocol = https
[gist]
	private = yes
	browse = yes
#[credential]
	# helper = cache --timeout=300

[push]
	default = matching
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[filter "media"]
	required = true
	clean = git media clean %f
	smudge = git media smudge %f

[gh]
protocol = https
#[github]
#	user = sbarre01
#[credential]
#	helper = osxkeychain

[github]
[github]
	user = sbarre01
	#token = PLACEHOLDER

[http]
	sslVerify = false
	postBuffer = 524288000
[credential]
	helper = osxkeychain

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
